from flask import Flask, render_template, request, redirect, url_for, session, jsonify
import json
import os
from datetime import datetime, timedelta
import pandas as pd
import numpy as np
import pickle

import requests
import google.generativeai as genai


app = Flask(__name__)
app.secret_key = 'your_secret_key'  # For session management



# Configure the API key from the environment variable
genai.configure(api_key= 'AIzaSyABBaeKAY2x-yIugIXeelO5hvN_jwCOUOg' )
model = genai.GenerativeModel('gemini-1.5-flash')

def run_chat(prompt):
    response = model.generate_content(prompt)
    return response.text









# load databasedataset===================================
sym_des = pd.read_csv("Medicine-Recommendation-System-Personalized-Medical-Recommendation-System-with-Machine-Learning/datasets/symtoms_df.csv")
precautions = pd.read_csv("Medicine-Recommendation-System-Personalized-Medical-Recommendation-System-with-Machine-Learning/datasets/precautions_df.csv")
workout = pd.read_csv("Medicine-Recommendation-System-Personalized-Medical-Recommendation-System-with-Machine-Learning/datasets/workout_df.csv")
description = pd.read_csv("Medicine-Recommendation-System-Personalized-Medical-Recommendation-System-with-Machine-Learning/datasets/description.csv")
medications = pd.read_csv('Medicine-Recommendation-System-Personalized-Medical-Recommendation-System-with-Machine-Learning/datasets/medications.csv')
diets = pd.read_csv("Medicine-Recommendation-System-Personalized-Medical-Recommendation-System-with-Machine-Learning/datasets/diets.csv")


# load model===========================================
svc = pickle.load(open('Medicine-Recommendation-System-Personalized-Medical-Recommendation-System-with-Machine-Learning/models/svc.pkl','rb'))



#============================================================
# custome and helping functions
#==========================helper funtions================
def helper(dis):
    desc = description[description['Disease'] == dis]['Description']
    desc = " ".join([w for w in desc])

    pre = precautions[precautions['Disease'] == dis][['Precaution_1', 'Precaution_2', 'Precaution_3', 'Precaution_4']]
    pre = [col for col in pre.values]

    med = medications[medications['Disease'] == dis]['Medication']
    med = [med for med in med.values]

    die = diets[diets['Disease'] == dis]['Diet']
    die = [die for die in die.values]

    wrkout = workout[workout['disease'] == dis] ['workout']


    return desc,pre,med,die,wrkout



symptoms_dict = {'itching': 0, 'skin_rash': 1, 'nodal_skin_eruptions': 2, 'continuous_sneezing': 3, 'shivering': 4, 'chills': 5, 'joint_pain': 6, 'stomach_pain': 7, 'acidity': 8, 'ulcers_on_tongue': 9, 'muscle_wasting': 10, 'vomiting': 11, 'burning_micturition': 12, 'spotting_ urination': 13, 'fatigue': 14, 'weight_gain': 15, 'anxiety': 16, 'cold_hands_and_feets': 17, 'mood_swings': 18, 'weight_loss': 19, 'restlessness': 20, 'lethargy': 21, 'patches_in_throat': 22, 'irregular_sugar_level': 23, 'cough': 24, 'high_fever': 25, 'sunken_eyes': 26, 'breathlessness': 27, 'sweating': 28, 'dehydration': 29, 'indigestion': 30, 'headache': 31, 'yellowish_skin': 32, 'dark_urine': 33, 'nausea': 34, 'loss_of_appetite': 35, 'pain_behind_the_eyes': 36, 'back_pain': 37, 'constipation': 38, 'abdominal_pain': 39, 'diarrhoea': 40, 'mild_fever': 41, 'yellow_urine': 42, 'yellowing_of_eyes': 43, 'acute_liver_failure': 44, 'fluid_overload': 45, 'swelling_of_stomach': 46, 'swelled_lymph_nodes': 47, 'malaise': 48, 'blurred_and_distorted_vision': 49, 'phlegm': 50, 'throat_irritation': 51, 'redness_of_eyes': 52, 'sinus_pressure': 53, 'runny_nose': 54, 'congestion': 55, 'chest_pain': 56, 'weakness_in_limbs': 57, 'fast_heart_rate': 58, 'pain_during_bowel_movements': 59, 'pain_in_anal_region': 60, 'bloody_stool': 61, 'irritation_in_anus': 62, 'neck_pain': 63, 'dizziness': 64, 'cramps': 65, 'bruising': 66, 'obesity': 67, 'swollen_legs': 68, 'swollen_blood_vessels': 69, 'puffy_face_and_eyes': 70, 'enlarged_thyroid': 71, 'brittle_nails': 72, 'swollen_extremeties': 73, 'excessive_hunger': 74, 'extra_marital_contacts': 75, 'drying_and_tingling_lips': 76, 'slurred_speech': 77, 'knee_pain': 78, 'hip_joint_pain': 79, 'muscle_weakness': 80, 'stiff_neck': 81, 'swelling_joints': 82, 'movement_stiffness': 83, 'spinning_movements': 84, 'loss_of_balance': 85, 'unsteadiness': 86, 'weakness_of_one_body_side': 87, 'loss_of_smell': 88, 'bladder_discomfort': 89, 'foul_smell_of urine': 90, 'continuous_feel_of_urine': 91, 'passage_of_gases': 92, 'internal_itching': 93, 'toxic_look_(typhos)': 94, 'depression': 95, 'irritability': 96, 'muscle_pain': 97, 'altered_sensorium': 98, 'red_spots_over_body': 99, 'belly_pain': 100, 'abnormal_menstruation': 101, 'dischromic _patches': 102, 'watering_from_eyes': 103, 'increased_appetite': 104, 'polyuria': 105, 'family_history': 106, 'mucoid_sputum': 107, 'rusty_sputum': 108, 'lack_of_concentration': 109, 'visual_disturbances': 110, 'receiving_blood_transfusion': 111, 'receiving_unsterile_injections': 112, 'coma': 113, 'stomach_bleeding': 114, 'distention_of_abdomen': 115, 'history_of_alcohol_consumption': 116, 'fluid_overload.1': 117, 'blood_in_sputum': 118, 'prominent_veins_on_calf': 119, 'palpitations': 120, 'painful_walking': 121, 'pus_filled_pimples': 122, 'blackheads': 123, 'scurring': 124, 'skin_peeling': 125, 'silver_like_dusting': 126, 'small_dents_in_nails': 127, 'inflammatory_nails': 128, 'blister': 129, 'red_sore_around_nose': 130, 'yellow_crust_ooze': 131}
diseases_list = {15: 'Fungal infection', 4: 'Allergy', 16: 'GERD', 9: 'Chronic cholestasis', 14: 'Drug Reaction', 33: 'Peptic ulcer diseae', 1: 'AIDS', 12: 'Diabetes ', 17: 'Gastroenteritis', 6: 'Bronchial Asthma', 23: 'Hypertension ', 30: 'Migraine', 7: 'Cervical spondylosis', 32: 'Paralysis (brain hemorrhage)', 28: 'Jaundice', 29: 'Malaria', 8: 'Chicken pox', 11: 'Dengue', 37: 'Typhoid', 40: 'hepatitis A', 19: 'Hepatitis B', 20: 'Hepatitis C', 21: 'Hepatitis D', 22: 'Hepatitis E', 3: 'Alcoholic hepatitis', 36: 'Tuberculosis', 10: 'Common Cold', 34: 'Pneumonia', 13: 'Dimorphic hemmorhoids(piles)', 18: 'Heart attack', 39: 'Varicose veins', 26: 'Hypothyroidism', 24: 'Hyperthyroidism', 25: 'Hypoglycemia', 31: 'Osteoarthristis', 5: 'Arthritis', 0: '(vertigo) Paroymsal  Positional Vertigo', 2: 'Acne', 38: 'Urinary tract infection', 35: 'Psoriasis', 27: 'Impetigo'}


def load_symptoms_data():
    # Using the provided symptoms_dict to extract the symptoms
    symptoms_dict = {
        'itching': 0, 'skin_rash': 1, 'nodal_skin_eruptions': 2, 'continuous_sneezing': 3, 
        'shivering': 4, 'chills': 5, 'joint_pain': 6, 'stomach_pain': 7, 'acidity': 8, 
        'ulcers_on_tongue': 9, 'muscle_wasting': 10, 'vomiting': 11, 'burning_micturition': 12, 
        'spotting_urination': 13, 'fatigue': 14, 'weight_gain': 15, 'anxiety': 16, 
        'cold_hands_and_feets': 17, 'mood_swings': 18, 'weight_loss': 19, 'restlessness': 20, 
        'lethargy': 21, 'patches_in_throat': 22, 'irregular_sugar_level': 23, 'cough': 24, 
        'high_fever': 25, 'sunken_eyes': 26, 'breathlessness': 27, 'sweating': 28, 
        'dehydration': 29, 'indigestion': 30, 'headache': 31, 'yellowish_skin': 32, 
        'dark_urine': 33, 'nausea': 34, 'loss_of_appetite': 35, 'pain_behind_the_eyes': 36, 
        'back_pain': 37, 'constipation': 38, 'abdominal_pain': 39, 'diarrhoea': 40, 
        'mild_fever': 41, 'yellow_urine': 42, 'yellowing_of_eyes': 43, 'acute_liver_failure': 44, 
        'fluid_overload': 45, 'swelling_of_stomach': 46, 'swelled_lymph_nodes': 47, 
        'malaise': 48, 'blurred_and_distorted_vision': 49, 'phlegm': 50, 'throat_irritation': 51, 
        'redness_of_eyes': 52, 'sinus_pressure': 53, 'runny_nose': 54, 'congestion': 55, 
        'chest_pain': 56, 'weakness_in_limbs': 57, 'fast_heart_rate': 58, 
        'pain_during_bowel_movements': 59, 'pain_in_anal_region': 60, 'bloody_stool': 61, 
        'irritation_in_anus': 62, 'neck_pain': 63, 'dizziness': 64, 'cramps': 65, 
        'bruising': 66, 'obesity': 67, 'swollen_legs': 68, 'swollen_blood_vessels': 69, 
        'puffy_face_and_eyes': 70, 'enlarged_thyroid': 71, 'brittle_nails': 72, 
        'swollen_extremeties': 73, 'excessive_hunger': 74, 'extra_marital_contacts': 75, 
        'drying_and_tingling_lips': 76, 'slurred_speech': 77, 'knee_pain': 78, 
        'hip_joint_pain': 79, 'muscle_weakness': 80, 'stiff_neck': 81, 'swelling_joints': 82, 
        'movement_stiffness': 83, 'spinning_movements': 84, 'loss_of_balance': 85, 
        'unsteadiness': 86, 'weakness_of_one_body_side': 87, 'loss_of_smell': 88, 
        'bladder_discomfort': 89, 'foul_smell_of_urine': 90, 'continuous_feel_of_urine': 91, 
        'passage_of_gases': 92, 'internal_itching': 93, 'toxic_look_(typhos)': 94, 
        'depression': 95, 'irritability': 96, 'muscle_pain': 97, 'altered_sensorium': 98, 
        'red_spots_over_body': 99, 'belly_pain': 100, 'abnormal_menstruation': 101, 
        'dischromic_patches': 102, 'watering_from_eyes': 103, 'increased_appetite': 104, 
        'polyuria': 105, 'family_history': 106, 'mucoid_sputum': 107, 'rusty_sputum': 108, 
        'lack_of_concentration': 109, 'visual_disturbances': 110, 'receiving_blood_transfusion': 111, 
        'receiving_unsterile_injections': 112, 'coma': 113, 'stomach_bleeding': 114, 
        'distention_of_abdomen': 115, 'history_of_alcohol_consumption': 116, 
        'fluid_overload.1': 117, 'blood_in_sputum': 118, 'prominent_veins_on_calf': 119, 
        'palpitations': 120, 'painful_walking': 121, 'pus_filled_pimples': 122, 
        'blackheads': 123, 'scurring': 124, 'skin_peeling': 125, 'silver_like_dusting': 126, 
        'small_dents_in_nails': 127, 'inflammatory_nails': 128, 'blister': 129, 
        'red_sore_around_nose': 130, 'yellow_crust_ooze': 131
    }
    
    # Return a list of symptoms
    return list(symptoms_dict.keys())



# Model Prediction function
def get_predicted_value(patient_symptoms):
    input_vector = np.zeros(len(symptoms_dict))
    for item in patient_symptoms:
        input_vector[symptoms_dict[item]] = 1
    return diseases_list[svc.predict([input_vector])[0]]




# Load JSON data
def load_user_data():
    if os.path.exists('users.json'):
        with open('users.json', 'r') as f:
            return json.load(f)
    return {}


# Load responses from JSON
with open('responses.json', 'r') as f:
    responses_data = json.load(f)









def chatbot_response(user_message, user_id, users_data):
    response = ""
    current_chat = users_data[user_id].get('current_chat', {})
    user_message_lower = user_message.lower().strip()

    # Load doctor data
    doctors_data = load_doctor_data()
    # Start of conversation
    
    # Initialize states if not present
    if "state" not in current_chat:
        current_chat["state"] = "start"

    # if current_chat["state"] == "start":
    #     user_message_lower = user_message.lower()  # Normalize input
    #     for entry in responses_data["questions"]:
    #         if entry["question"] in user_message_lower:
    #             return entry["response"]
           
        
    all_possible_symptoms = load_symptoms_data()  # Load from a reliable source or dataset
    
    # Detect disease from symptoms
    if current_chat["state"] == "start":
        
        user_message_lower = user_message.lower()  # Normalize input

        # Load possible symptoms data
        all_possible_symptoms = load_symptoms_data()

        # # Detect disease from symptoms
        # detected_symptoms = [sym for sym in all_possible_symptoms if sym in user_message_lower]


        detected_symptoms = [sym for sym in all_possible_symptoms if sym in user_message_lower]
        # response = "It seems like you haven't mentioned enough symptoms. Can you please specify more symptoms?"



        if detected_symptoms:
            # Call the prediction function with detected symptoms
            predicted_disease = get_predicted_value(detected_symptoms)
            dis_des, precautions, medications, rec_diet, workout = helper(predicted_disease)

            # Format the response with detailed information
            response = (
                    "<div style='font-family: Arial, sans-serif; line-height: 1.5;'>"
                    "<h2 style='color: #2C3E50;'>Predicted Disease</h2>"
                    f"<p style='font-size: 18px; color: #2980B9;'><strong>{predicted_disease}</strong></p>"
                    
                    "<h3 style='color: #8E44AD;'>Description</h3>"
                    f"<p>{dis_des}</p>"
                    
                    "<h3 style='color: #8E44AD;'>Precautions</h3>"
                    f"<p>{', '.join(precautions[0])}</p>"
                    
                    "<h3 style='color: #8E44AD;'>Medications</h3>"
                    f"<p>{', '.join(medications)}</p>"
                    
                    "<h3 style='color: #8E44AD;'>Workout</h3>"
                    f"<p>{', '.join(workout)}</p>"
                    
                    "<h3 style='color: #8E44AD;'>Diet</h3>"
                    f"<p>{', '.join(rec_diet)}</p>"
                    "</div>"
                )


            # Continue to doctor selection based on the predicted disease
            doctors = [doc for doc in doctors_data if predicted_disease.lower() in doc["specialty"].lower()]
            current_chat["doctors"] = doctors
            if doctors:
                doctor_names = "\n".join([f"{i + 1}) {doc['name']}" for i, doc in enumerate(doctors)])
                response += f"\nHere are the doctors available for {predicted_disease}:\n{doctor_names}\nPlease select a doctor by number."
                current_chat["state"] = "select_doctor"
            else:
                response += "Sorry, there are no doctors available for this disease currently ."
                current_chat.clear()

        else:
            # response = "It seems like you haven't mentioned enough symptoms. Can you please specify more symptoms?"
            # current_chat["state"] = "start"
            return run_chat(user_message)

    elif current_chat["state"] == "select_doctor":
        try:
            doctor_choice = int(user_message_lower) - 1
            selected_doctor = current_chat["doctors"][doctor_choice]
            current_chat["selected_doctor"] = selected_doctor["name"]  # Store doctor's name

            response = "You have selected Dr. {}.\nPlease choose a day for your appointment from today to the next 7 days (Monday to Friday):".format(selected_doctor["name"])
            
            weekdays = get_weekdays()
            response += " " + ", ".join([day.split()[0] for day in weekdays])
            current_chat["state"] = "select_day"
        except (ValueError, IndexError):
            response = "Invalid choice. Please select a valid doctor by number you are currently in the middle of taking an appointment."
    # # Handle doctor selection
    # elif current_chat["state"] == "select_doctor":
    #     try:
    #         doctor_choice = int(user_message_lower) - 1
    #         selected_doctor = current_chat["doctors"][doctor_choice]
    # #         response = f"You have selected Dr. {selected_doctor['name']}.\nPlease select a day and time for your appointment."
    # #         current_chat["selected_doctor"] = selected_doctor
    # #         current_chat["state"] = "appointment_booking"
    # #     except (ValueError, IndexError):
    # #         response = "Invalid choice. Please select a valid doctor by number."
    # # # Selecting a doctor
    # # elif current_chat["state"] == "select_doctor" and user_message.isdigit():
    # #     doctor_index = int(user_message) - 1
        
    # #     if 0 <= doctor_index < len(current_chat["doctors"]):
    # #         current_chat["selected_doctor"] = current_chat["doctors"][doctor_index]["name"]
    #         response = "Please choose a day for your appointment from today to the next 7 days (Monday to Friday):"
    #         weekdays = get_weekdays()
    #         response += " " + ", ".join([day.split()[0] for day in weekdays])
    #         current_chat["state"] = "select_day"
    #     except (ValueError, IndexError):
    #         response = "Invalid choice. Please select a valid doctor by number."

    # Selecting a day
    elif current_chat["state"] == "select_day":
        valid_days = [day.split()[0].lower() for day in get_weekdays()]
        if user_message_lower in valid_days:
            current_chat["selected_day"] = user_message_lower
            response = "Please choose a time slot: 9-12, 1-3, 4-6."
            current_chat["state"] = "select_time_slot"
        else:
            response = "Please select a valid weekday."

    # Selecting a time slot
    elif current_chat["state"] == "select_time_slot":
        valid_time_slots = ["9-12", "1-3", "4-6"]
        if user_message in valid_time_slots:
            selected_doctor = next(doc for doc in doctors_data if doc["name"] == current_chat["selected_doctor"])

            # Check if the selected time slot is already booked for the selected day
            existing_appointment = any(
                appt["day"] == current_chat["selected_day"] and appt["time_slot"] == user_message
                for appt in selected_doctor["appointments"]
            )

            if existing_appointment:
                response = f"Sorry, {current_chat['selected_doctor']} already has an appointment on {current_chat['selected_day']} during the {user_message} time slot. Please choose another time slot."
            else:
                # If no conflict, book the appointment
                appointment = {
                    "doctor": current_chat["selected_doctor"],
                    "day": current_chat["selected_day"],
                    "time_slot": user_message
                }
                users_data[user_id]['appointments'].append(appointment)

                # Add the appointment to the doctor's JSON data as well
                selected_doctor["appointments"].append({
                    "patient_id": user_id,
                    "day": current_chat["selected_day"],
                    "time_slot": user_message
                })

                response = f"Your appointment has been booked with {current_chat['selected_doctor']} on {current_chat['selected_day']} during the time slot {user_message}."
                current_chat["state"] = "completed"
                save_user_data(users_data)
                save_doctor_data(doctors_data)  # Save the updated doctor data
                current_chat.clear()
        else:
            response = "Please choose a valid time slot you are currently in the middle of booking appointment ."

    else:
        # If no matching question is found, get a response from the Gemini API
        return run_chat(user_message)

    users_data[user_id]['current_chat'] = current_chat
    save_user_data(users_data)
    return response






def get_weekdays():
    from datetime import datetime, timedelta

    weekdays = []
    today = datetime.now()
    for i in range(7):
        day = today + timedelta(days=i)
        if day.weekday() < 5:  # Monday to Friday
            weekdays.append(day.strftime("%A %d %b %Y"))
    return weekdays

def load_doctor_data():
    import json
    with open("doctors.json", "r") as file:
        return json.load(file)

def save_doctor_data(doctors_data):
    import json
    with open("doctors.json", "w") as file:
        json.dump(doctors_data, file, indent=4)

def save_user_data(users_data):
    import json
    with open("users.json", "w") as file:
        json.dump(users_data, file, indent=4)








@app.route('/')
def home():
    return redirect(url_for('login'))

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        user_id = request.form.get('user_id')
        password = request.form.get('password')  # A simple password check (for demonstration)

        # For simplicity, assuming user_id and password check is always valid
        session['user_id'] = user_id
        return redirect(url_for('chat'))

    return render_template('login.html')

@app.route('/chat', methods=['GET', 'POST'])
def chat():
    user_id = session.get('user_id')
    if not user_id:
        return redirect(url_for('login'))

    users_data = load_user_data()

    # If user data doesn't exist, create it
    if user_id not in users_data:
        users_data[user_id] = {"chat_history": [], "appointments": [], "current_chat": {}}
        save_user_data(users_data)

    # Chat handling
    if request.method == 'POST':
        user_message = request.form.get('message')
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        
        # Store the user's chat
        users_data[user_id]['chat_history'].append({
            'sender': 'user',
            'message': user_message,
            'timestamp': timestamp
        })
        
        # Generate chatbot response
        bot_message = chatbot_response(user_message, user_id, users_data)
        bot_timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

        # Store the chatbot's chat
        users_data[user_id]['chat_history'].append({
            'sender': 'bot',
            'message': bot_message,
            'timestamp': bot_timestamp
        })

        save_user_data(users_data)

    chat_history = users_data[user_id]['chat_history']
    appointments = users_data[user_id]['appointments']

    return render_template('chat.html', chat_history=chat_history, appointments=appointments)

@app.route('/appointments')
def view_appointments():
    user_id = session.get('user_id')
    if not user_id:
        return redirect(url_for('login'))

    users_data = load_user_data()
    appointments = users_data[user_id]['appointments']
    return render_template('appointments.html', appointments=appointments)

@app.route('/logout')
def logout():
    session.clear()
    return redirect(url_for('login'))


@app.route('/doctor_dashboard')
def doctor_dashboard():
    doctors_data = load_doctor_data()
    return render_template('doctor_dashboard.html', doctors=doctors_data)


if __name__ == '__main__':
    app.run(debug=True, port=8000)
